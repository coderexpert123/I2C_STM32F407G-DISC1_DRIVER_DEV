/*
 * stm32f407xx.h
 *
 *  Created on: Apr 7, 2024
 *      Author: nishant singh
 */



#ifndef INC_STM32F407XX_H_
#define INC_STM32F407XX_H_

#include <stdint.h>
#include <stdio.h>
#include <stddef.h>

#define __vo volatile
//Base address


#define ENABLE  1
#define DISABLE 0
#define SET		ENABLE
#define RESET 	DISABLE
#define FLAG_RESET	RESET
#define FLAG_SET	SET


#define FLASH_BASEADDR	0x08000000U
#define SRAM1_BASEADDR	0x20000000U	// 112kb of sram1
#define SRAM2_BASEADDR	0x20001C00U	// 16 kb of sram2
#define ROM_BASEADDR	0x1FFF0000U	// 30kb of  system memory
#define SRAM 			SRAM1_BASEADDR



//Base address of APBx and AHBx

#define PERIPPH_BASE	0x40000000U
#define AHB1PERIPH_BASE	0x40020000U
#define AHB2PERIPH_BASE	0x50000000U
#define APB1ERIPH_BASE	0x40000000U
#define APB2ERIPH_BASE	0x40010000U

//Peripheral base address macros of AHB1 bus

#define GPIOA_BASEADDR	(AHB1PERIPH_BASE + 0x000)
#define GPIOB_BASEADDR	(AHB1PERIPH_BASE + 0x400)
#define GPIOC_BASEADDR	(AHB1PERIPH_BASE + 0x800)
#define GPIOD_BASEADDR	(AHB1PERIPH_BASE + 0xC00)
#define GPIOE_BASEADDR	(AHB1PERIPH_BASE + 0x1000)
#define GPIOF_BASEADDR	(AHB1PERIPH_BASE + 0x1400)
#define GPIOG_BASEADDR	(AHB1PERIPH_BASE + 0x1800)
#define GPIOH_BASEADDR	(AHB1PERIPH_BASE + 0x1C00)
#define GPIOI_BASEADDR	(AHB1PERIPH_BASE + 0x2000)
#define GPIOJ_BASEADDR	(AHB1PERIPH_BASE + 0x2400)
#define GPIOK_BASEADDR	(AHB1PERIPH_BASE + 0x2800)
#define RCC_BASEADDR 	(AHB1PERIPH_BASE + 0x3800)


// peripheral base address macros of APB1 bus

// I2C peripheral base address
#define I2C1_BASEADDR 	(APB1ERIPH_BASE + 0x5400 )
#define I2C2_BASEADDR 	(APB1ERIPH_BASE + 0x5800 )
#define I2C3_BASEADDR 	(APB1ERIPH_BASE + 0x5C00 )

// SPI peripheral base address
#define SPI2_BASEADDR	(APB1ERIPH_BASE + 0x3800)
#define SPI3_BASEADDR	(APB1ERIPH_BASE + 0x3C00)

//USART peripheral base address
#define	USART2_BASEADDR	(APB1ERIPH_BASE + 0x4400)
#define	USART3_BASEADDR	(APB1ERIPH_BASE + 0x4800)

// UART peripheral base address
#define UART4_BASEADDR		(APB1ERIPH_BASE + 0x4C00)
#define UART5_BASEADDR		(APB1ERIPH_BASE + 0x5000)

// peripheral base address macros of APB2 bus
#define EXTI_BASEADDR		(APB2ERIPH_BASE + 0x3C00)
#define SPI1_BASEADDR		(APB2ERIPH_BASE + 0x3000)
#define USART1_BASEADDR		(AHB2PERIPH_BASE+ 0x1000)
#define USART6_BASEADDR		(APB2ERIPH_BASE + 0x1400)
#define SYSCFG_BASEADDR		(APB2ERIPH_BASE + 0x3800)


// GPIO structure definition

typedef struct {
	__vo uint32_t MODER  ;	// gpio mode register at 				0x00
	__vo uint32_t OTYPER ;	// gpio output type register at 		0x04
	__vo uint32_t OSPEEDR;	// gpio output speed register at 		0x08
	__vo uint32_t PUPDR	 ;	// gpio pull up pull down register at 	0x0c
	__vo uint32_t IDR	 ;	// gpio input data register at 			0x10
	__vo uint32_t ODR	 ;	// gpio output data register at 		0x14
	__vo uint32_t BSRR	 ;	// gpio bit set reset regisetr at 		0x18
	__vo uint32_t LCKR	 ;	// gpio lock register at 				0x1c
	__vo uint32_t AFR[2] ;	/* gpio alternate function high and
								   low register at 						0x20 and
																		0x24*/
}GPIO_RegDef_t;


// GPIO struct macos

#define GPIOA	((GPIO_RegDef_t *)GPIOA_BASEADDR)
#define GPIOB	((GPIO_RegDef_t *)GPIOB_BASEADDR)
#define GPIOC	((GPIO_RegDef_t *)GPIOC_BASEADDR)
#define GPIOD	((GPIO_RegDef_t *)GPIOD_BASEADDR)
#define GPIOE	((GPIO_RegDef_t *)GPIOE_BASEADDR)
#define GPIOF	((GPIO_RegDef_t *)GPIOF_BASEADDR)
#define GPIOG	((GPIO_RegDef_t *)GPIOG_BASEADDR)
#define GPIOH	((GPIO_RegDef_t *)GPIOH_BASEADDR)
#define GPIOI	((GPIO_RegDef_t *)GPIOI_BASEADDR)
#define GPIOJ	((GPIO_RegDef_t *)GPIOJ_BASEADDR)
#define GPIOK	((GPIO_RegDef_t *)GPIOK_BASEADDR)




//RCC structure definition

typedef struct {
	__vo  uint32_t	CR 			;
	__vo  uint32_t	PLLCFGR 	;
	__vo  uint32_t	CFGR		;
	__vo  uint32_t	CIR			;
	__vo  uint32_t	AHB1RSTR	;
	__vo  uint32_t	AHB2RSTR	;
	__vo  uint32_t	AHB3RSTR	;
	__vo  uint32_t	RESERVED1	;
	__vo  uint32_t	APB1RSTR	;
	__vo  uint32_t	APB2RSTR	;
	__vo  uint32_t	RESERVED2[2];
	__vo  uint32_t	AHB1ENR 	;
	__vo  uint32_t	AHB2ENR 	;
	__vo  uint32_t	AHB3ENR 	;
	__vo  uint32_t	RESERVED3 	;
	__vo  uint32_t	APB1ENR 	;
	__vo  uint32_t	APB2ENR 	;
	__vo  uint32_t	RESERVED4[2];
	__vo  uint32_t	AHB1LPENR 	;
	__vo  uint32_t	AHB2LPENR 	;
	__vo  uint32_t	AHB3LPENR 	;
	__vo  uint32_t	RESERVED5 	;
	__vo  uint32_t	APB1LPENR 	;
	__vo  uint32_t	APB2LPENR 	;
	__vo  uint32_t	RESERVED6[2];
	__vo  uint32_t	BDCR 		;
	__vo  uint32_t	CSR 		;
	__vo  uint32_t	RESERVED7[2];
	__vo  uint32_t	SSCGR 		;
	__vo  uint32_t	PLLI2SCFGR 	;

}RCC_RegDef_t;



// Peripheral clock enable macros

	// clock enable macros for GPIOx
	#define GPIOA_CLOCK_ENABLE()	(RCC->AHB1ENR  |= (1 << 0) )
	#define GPIOB_CLOCK_ENABLE()	(RCC->AHB1ENR  |= (1 << 1) )
	#define GPIOC_CLOCK_ENABLE()	(RCC->AHB1ENR  |= (1 << 2) )
	#define GPIOD_CLOCK_ENABLE()	(RCC->AHB1ENR  |= (1 << 3) )
	#define GPIOE_CLOCK_ENABLE()	(RCC->AHB1ENR  |= (1 << 4) )
	#define GPIOF_CLOCK_ENABLE()	(RCC->AHB1ENR  |= (1 << 5) )
	#define GPIOG_CLOCK_ENABLE()	(RCC->AHB1ENR  |= (1 << 6) )
	#define GPIOH_CLOCK_ENABLE()	(RCC->AHB1ENR  |= (1 << 7) )
	#define GPIOI_CLOCK_ENABLE()	(RCC->AHB1ENR  |= (1 << 8) )
	#define GPIOJ_CLOCK_ENABLE()	(RCC->AHB1ENR  |= (1 << 9) )
	#define GPIOK_CLOCK_ENABLE()	(RCC->AHB1ENR  |= (1 << 10) )

	// clock enable macros for I2Cx
	#define I2C1_CLOCK_ENABLE()			(RCC->APB1ENR |= (1 << 21) )
	#define I2C2_CLOCK_ENABLE()			(RCC->APB1ENR |= (1 << 22) )
	#define I2C3_CLOCK_ENABLE()			(RCC->APB1ENR |= (1 << 23) )

	// clock enable macros for spix
	#define SPI1_CLOCK_ENABLE()			(RCC->APB2ENR |= (1 << 12) )
	#define SPI2_CLOCK_ENABLE()			(RCC->APB1ENR |= (1 << 14) )
	#define SPI3_CLOCK_ENABLE()			(RCC->APB1ENR |= (1 << 15) )
	#define SPI4_CLOCK_ENABLE()			(RCC->APB2ENR |= (1 << 13) )

	//clock enable macros for usartx and uartx
	#define USART1_CLOCK_ENABLE()		(RCC->APB2ENR |= (1 << 4 ) )
	#define USART2_CLOCK_ENABLE()		(RCC->APB1ENR |= (1 << 17) )
	#define USART3_CLOCK_ENABLE()		(RCC->APB1ENR |= (1 << 18) )
	#define UART4_CLOCK_ENABLE()		(RCC->APB1ENR |= (1 << 19) )
	#define UART5_CLOCK_ENABLE()		(RCC->APB1ENR |= (1 << 20) )
	#define USART6_CLOCK_ENABLE()		(RCC->APB2ENR |= (1 << 5 ) )

	// clock enable macro for syscfg
	#define SYSCFG_CLOCK_ENABLE()			(RCC->APB2ENR |= (1 << 14) )

// Peripheral clock disable macros

	// clock disable macros for GPIOx
	#define GPIOA_CLOCK_DISABLE()	(RCC->AHB1ENR  &= ~(1 << 0) )
	#define GPIOB_CLOCK_DISABLE()	(RCC->AHB1ENR  &= ~(1 << 1) )
	#define GPIOC_CLOCK_DISABLE()	(RCC->AHB1ENR  &= ~(1 << 2) )
	#define GPIOD_CLOCK_DISABLE()	(RCC->AHB1ENR  &= ~(1 << 3) )
	#define GPIOE_CLOCK_DISABLE()	(RCC->AHB1ENR  &= ~(1 << 4) )
	#define GPIOF_CLOCK_DISABLE()	(RCC->AHB1ENR  &= ~(1 << 5) )
	#define GPIOG_CLOCK_DISABLE()	(RCC->AHB1ENR  &= ~(1 << 6) )
	#define GPIOH_CLOCK_DISABLE()	(RCC->AHB1ENR  &= ~(1 << 7) )
	#define GPIOI_CLOCK_DISABLE()	(RCC->AHB1ENR  &= ~(1 << 8) )
	#define GPIOJ_CLOCK_DISABLE()	(RCC->AHB1ENR  &= ~(1 << 9) )
	#define GPIOK_CLOCK_DISABLE()	(RCC->AHB1ENR  &= ~(1 << 10) )

	// clock disable macros for I2Cx
	#define I2C1_CLOCK_DISABLE()			(RCC->APB1ENR &= ~(1 << 21) )
	#define I2C2_CLOCK_DISABLE()			(RCC->APB1ENR &= ~(1 << 22) )
	#define I2C3_CLOCK_DISABLE()			(RCC->APB1ENR &= ~(1 << 23) )

	// clock disable macros for spix
	#define SPI1_CLOCK_DISABLE()			(RCC->APB2ENR &= ~(1 << 12) )
	#define SPI2_CLOCK_DISABLE()			(RCC->APB1ENR &= ~(1 << 14) )
	#define SPI3_CLOCK_DISABLE()			(RCC->APB1ENR &= ~(1 << 15) )
	#define SPI4_CLOCK_DISABLE()			(RCC->APB2ENR &= ~(1 << 13) )

	//clock disable macros for usartx and uartx
	#define USART1_CLOCK_DISABLE()		(RCC->APB2ENR &= ~(1 << 4 ) )
	#define USART2_CLOCK_DISABLE()		(RCC->APB1ENR &= ~(1 << 17) )
	#define USART3_CLOCK_DISABLE()		(RCC->APB1ENR &= ~(1 << 18) )
	#define UART4_CLOCK_DISABLE()		(RCC->APB1ENR &= ~(1 << 19) )
	#define UART5_CLOCK_DISABLE()		(RCC->APB1ENR &= ~(1 << 20) )
	#define USART6_CLOCK_DISABLE()		(RCC->APB2ENR &= ~(1 << 5 ) )

	// clock disable macro for syscfg
	#define SYSCFG_CLOCK_DISABLE()			(RCC->APB2ENR &= ~(1 << 14) )


#endif /* INC_STM32F407XX_H_ */
